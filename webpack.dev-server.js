var path = require('path');
var webpack = require('webpack');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var WebpackDevServer = require('webpack-dev-server');

// Entry
var entry = [
  "webpack-dev-server/client?http://localhost:3000", // Needed for hot reloading
  "webpack/hot/only-dev-server", // See above
  path.resolve(__dirname, 'src/app.js') // Start with js/app.js...
];
var cssLoaders = 'style-loader!css-loader!postcss-loader';
// Only plugin is the hot module replacement plugin
var plugins = [
  new webpack.HotModuleReplacementPlugin(), // Make hot loading work
  new HtmlWebpackPlugin({
    template: 'src/index.html', // Move the index.html file
    inject: true // inject all files that are generated by webpack, e.g. bundle.js, main.css with the correct HTML tags
  })
];

var config = {
  entry: entry,
  output: { // Compile into js/build.js
    path: path.resolve(__dirname, 'build'),
    filename: 'js/bundle.js'
  },
  module: {
    loaders: [{
        test: /\.js$/, // Transform all .js files required somewhere within an entry point...
        loader: 'babel', // ...with the specified loaders...
        exclude: path.join(__dirname, '/node_modules/') // ...except for the node_modules folder.
      }, {
        test:   /\.css$/, // Transform all .css files required somewhere within an entry point...
        loader: cssLoaders // ...with PostCSS
      }, {
        test: /\.jpe?g$|\.gif$|\.png$|\.woff2|\.woff|\.ttf/i,
        loader: "url-loader?limit=10000"
      }
    ]
  },
  plugins: plugins,
  postcss: function() {
    return [
      require('postcss-import')({ // Import all the css files...
        glob: true,
        onImport: function (files) {
          files.forEach(this.addDependency); // ...and add dependecies from the main.css files to the other css files...
        }.bind(this) // ...so they get hotâ€“reloaded when something changes...
      }),
      require('postcss-simple-vars')(), // ...then replace the variables...
      require('postcss-reporter')({ // This plugin makes sure we get warnings in the console
        clearMessages: true
      })
    ];
  },
  target: 'web', // Make web variables accessible to webpack, e.g. window
  stats: false, // Don't show stats in the console
  progress: true
};

console.log('Starting server...\n');

new WebpackDevServer(webpack(config), { // Start a server
  publicPath: config.output.publicPath,
  hot: true, // With hot reloading
  inline: false,
  historyApiFallback: true,
  quiet: true // Without logging
}).listen(3000, 'localhost', function (err, result) {
  if (err) {
    console.log(err);
  } else {
    console.log('Server started');
    console.log('Listening at localhost:3000');
  }
});
